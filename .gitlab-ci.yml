stages:
  - create
  - destroy

create-infraestructure-do:
  image: hashicorp/terraform:1.3.0
  stage: create
  script:
    - terraform -chdir="./modules/k8s-digital-ocean" init  -backend-config="conn_str=${TF_PG_CONN}" -backend-config="schema_name=do_$BACKEND_SCHEMA"
    - terraform -chdir="./modules/k8s-digital-ocean" apply -auto-approve
  rules:
    - if: $PROVIDER == "digitalocean" && $BACKEND_SCHEMA && $ACTION == "create"
  retry: 2

destroy-infraestructure-do:
  image: hashicorp/terraform:1.3.0
  stage: destroy
  script:
    - terraform -chdir="./modules/k8s-digital-ocean" init  -backend-config="conn_str=${TF_PG_CONN}" -backend-config="schema_name=do_$BACKEND_SCHEMA"
    - terraform -chdir="./modules/k8s-digital-ocean" destroy -auto-approve
  rules:
    - if: $PROVIDER == "digitalocean" && $BACKEND_SCHEMA && $ACTION == "destroy"
  retry: 2

create-infraestructure-az:
  image: hashicorp/terraform:1.3.0
  stage: create
  script:
    - terraform -chdir="./modules/k8s-azure" init  -backend-config="conn_str=${TF_PG_CONN}" -backend-config="schema_name=az_$BACKEND_SCHEMA"
    - terraform -chdir="./modules/k8s-azure" apply -auto-approve
  rules:
    - if: $PROVIDER == "azure" && $BACKEND_SCHEMA && $ACTION == "create"
  retry: 2

destroy-infraestructure-az:
  image: hashicorp/terraform:1.3.0
  stage: destroy
  script:
    - terraform -chdir="./modules/k8s-azure" init  -backend-config="conn_str=${TF_PG_CONN}" -backend-config="schema_name=az_$BACKEND_SCHEMA"
    - terraform -chdir="./modules/k8s-azure" destroy -auto-approve
  rules:
    - if: $PROVIDER == "digitalocean" && $BACKEND_SCHEMA && $ACTION == "destroy"
  retry: 2

